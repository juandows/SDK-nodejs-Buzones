/*
 * APIBuzonesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
 'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const ObjectMapper = require("../../lib/ObjectMapper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.MessagesController;
const ModificarUnMensajeLeidoBorradoResponse = testerlib.ModificarUnMensajeLeidoBorradoResponse;
const ModificarUnMensajeLeidoBorradoRequest = testerlib.ModificarUnMensajeLeidoBorradoRequest;
const LeerUnMensajeResponse = testerlib.LeerUnMensajeResponse;
const CrearUnMensajeResponse = testerlib.CrearUnMensajeResponse;
const CrearUnMensajeRequest = testerlib.CrearUnMensajeRequest;
const LeerMensajesResponse = testerlib.LeerMensajesResponse;

describe("MessagesController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * TODO: Add Description
     */
    it("should testUnnammedEndpoint11 response", function testUnnammedEndpoint11Test(done) {
        controller.getUnnammedEndpointGet(function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * Modifica uno o variso de los campos: borrado, leido o consultado.
     */
    it("should testModificarUnMensajeLeidoBorrado1 response", function testModificarUnMensajeLeidoBorrado1Test(done) {
        // parameters for the API call
        let token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiJ1c2VyLl9pZCIsInVzZXJuYW1lIjoidXNlci51c2VybmFtZSIsImFkbWluIjoidXNlci5hZG1pbiIsImlhdCI6MTUxMzg0NTg2MywiZXhwIjoxNTE0NDUwNjYzLCJpc3MiOiJyZWR5c2VyLmNvbSIsInN1YiI6InVzZXJJbmZvIn0.tZTpGJa9o0jsjxJNeuiREquYDiskr3dkfCDPpsewwk8';
        let body = baseController.getObjectMapper().mapObject(
{

    "leido": true,

    "borrado": false

}, 'ModificarUnMensajeLeidoBorradoRequest');
        let contentType = 'application/json';

        controller.updateApplicationsIris2BoxesJuandeMcMessages5a0d6278c1371500112e5ddePatch(token, body, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('\n{\n\n    "data": {\n\n        "id": "123456",\n\n        "leido": true,\n\n        "borrado": false,\n\n        "fecha": "2017-10-20T15:59:45.000Z",\n\n        "data": {\n\n            "type": "incidencias_pregunta",\n\n            "referencia": "123456789"\n\n        }\n\n    }\n\n}', context.response.body);
            done();
        });
    });

    /**
     * Devuelve el mensaje (123456) del buzón (juande.mc) de la aplicación (iris2).
     */
    it("should testLeerUnMensaje1 response", function testLeerUnMensaje1Test(done) {
        // parameters for the API call
        let token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiJ1c2VyLl9pZCIsInVzZXJuYW1lIjoidXNlci51c2VybmFtZSIsImFkbWluIjoidXNlci5hZG1pbiIsImlhdCI6MTUxMzg0NTg2MywiZXhwIjoxNTE0NDUwNjYzLCJpc3MiOiJyZWR5c2VyLmNvbSIsInN1YiI6InVzZXJJbmZvIn0.tZTpGJa9o0jsjxJNeuiREquYDiskr3dkfCDPpsewwk8';

        controller.getApplicationsIris2BoxesJuandeMcMessages5a0d6278c1371500112e5ddeGet(token, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('\n{\n\n    "data":{\n\n        "id": "123456",\n\n    "leido": false,\n\n    "borrado": false,\n\n    "fecha": "2017-10-20T15:59:45.000Z",\n\n    "data": {\n\n        "type": "incidencias_pregunta",\n\n        "referencia": "123456789"\n\n    }\n\n    }\n\n}', context.response.body);
            done();
        });
    });

    /**
     * Crea un nuevo mensaje en el buzón (juande.mc) de la aplicación (iris2).
     */
    it("should testCrearUnMensaje1 response", function testCrearUnMensaje1Test(done) {
        // parameters for the API call
        let token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTg2MDM2NjF9.z_F1iok_-d4RTtjoGzUYFYC1V7DTtP339nofkaA_Y7Y';
        let body = baseController.getObjectMapper().mapObject(
{

    "leido": false,

    "borrado": false,

    "data": {

        "type" : "url",

        "url" : "http://www.redyser.com"

    },

    "expireAt": "2018-03-12T08:05:57.982Z"

}, 'CrearUnMensajeRequest');
        let contentType = 'application/json';

        controller.createApplicationsIris2BoxesJUANDEMCMessagesPost(token, body, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('\n{\n\n\n"data":\n\n        {\n\n            "id": "123456",\n\n            "leido": false,\n\n            "borrado": false,\n\n            "fecha": "2017-10-20T15:59:45.000Z",\n\n            "data": {\n\n                "type": "incidencias_pregunta",\n\n                "referencia": "123456789"\n\n            }\n\n        }\n\n}\n', context.response.body);
            done();
        });
    });

    /**
     * 
Devuelve todos los mensajes del buzón (juande.mc) de la aplicación (iris2). Acepta parametros en la url:


borrado: true/false


leido: true/false


fecha: mensajes desde esa fecha (ej.-2017-01-21)


skip: se salta ese número de documentos


limit: número documentos máximo que devolverá


order: (fecha/-fecha), ordena por ese campo
     */
    it("should testLeerMensajes1 response", function testLeerMensajes1Test(done) {
        // parameters for the API call
        let borrado = false;
        let fecha = ObjectMapper.parseDateTime('2017-11-15', 'rfc3339');
        let limit = 20;
        let skip = 0;
        let order = '-fecha';
        let token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTgwNzg2MjF9.P1Jry3Mu1g4xaHhUsE7cYtTkczeg5mup3E5uKPUP0Ps';
        let contentType = 'application/json';

        controller.getApplicationsIris2BoxesJUANDEMCMessagesGet(borrado, fecha, limit, skip, order, token, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('\n{\n\n    "data": [\n\n        {\n\n            "id": "123456",\n\n            "leido": false,\n\n            "borrado": false,\n\n            "fecha": "2017-10-20T15:59:45.000Z",\n\n            "data": {\n\n                "type": "incidencias_pregunta",\n\n                "referencia": "123456789"\n\n            }\n\n        },\n\n        {\n\n            "id": "123457",\n\n            "leido": false,\n\n            "borrado": false,\n\n            "fecha": "2017-10-20T16:59:45.000Z",\n\n            "data": {\n\n                "type": "incidencias_pregunta",\n\n                "referencia": "123456789"\n\n            }\n\n        }\n\n    ]\n\n}', context.response.body);
            done();
        });
    });

});
