/*
 * APIBuzonesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
 'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const ObjectMapper = require("../../lib/ObjectMapper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.GruposController;
const CrearUnMensajeAlGrupoPorNombreResponse = testerlib.CrearUnMensajeAlGrupoPorNombreResponse;
const CrearUnMensajeAlGrupoPorNombreRequest = testerlib.CrearUnMensajeAlGrupoPorNombreRequest;
const ModificarUnGrupoPorNombreResponse = testerlib.ModificarUnGrupoPorNombreResponse;
const ModificarUnGrupoPorNombreRequest = testerlib.ModificarUnGrupoPorNombreRequest;
const LeerUnGrupoPorNombreResponse = testerlib.LeerUnGrupoPorNombreResponse;
const ModificarUnGrupoResponse = testerlib.ModificarUnGrupoResponse;
const ModificarUnGrupoRequest = testerlib.ModificarUnGrupoRequest;
const LeerGruposDeUnaAplicacionResponse = testerlib.LeerGruposDeUnaAplicacionResponse;
const LeerUnGrupoResponse = testerlib.LeerUnGrupoResponse;
const CrearUnGrupoResponse = testerlib.CrearUnGrupoResponse;
const CrearUnGrupoRequest = testerlib.CrearUnGrupoRequest;
const LeerGruposResponse = testerlib.LeerGruposResponse;

describe("GruposController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * Crea un nuevo mensaje en los buzones de los usuarios(group) de la aplicación (iris2).
     */
    it("should testCrearUnMensajeAlGrupoPorNombre1 response", function testCrearUnMensajeAlGrupoPorNombre1Test(done) {
        // parameters for the API call
        let token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTM2MTI1OTAsInN0ciI6InN0ciIsImludCI6MSwiaXNzIjoicmVkeXNlci5jb20iLCJib29sIjp0cnVlfQ.f3t0DAv5eqd47UBsnQ3e4AZvnup9vSlvZB-iBjvegIo';
        let body = baseController.getObjectMapper().mapObject(
{

  "leido": false,

  "borrado": false,

  "data": {

    "type" : "recogidas_pendientes",

    "numero" : 7

  }

}, 'CrearUnMensajeAlGrupoPorNombreRequest');
        let contentType = 'application/json';

        controller.createGroups5a564715825d4f0e94946c1aApplicationsIris2MessagesPost2(token, body, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('\n{\n\n\n"data":\n\n        {\n\n            "id": "123456",\n\n            "leido": false,\n\n            "borrado": false,\n\n            "fecha": "2017-10-20T15:59:45.000Z",\n\n            "data": {\n\n                "type": "incidencias_pregunta",\n\n                "referencia": "123456789"\n\n            }\n\n        }\n\n}\n', context.response.body);
            done();
        });
    });

    /**
     * Modifica uno o variso de los campos.
     */
    it("should testModificarUnGrupoPorNombre1 response", function testModificarUnGrupoPorNombre1Test(done) {
        // parameters for the API call
        let token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTU2NzUxNTJ9.94eDQR7Rn8sUblFCaGzoEC1XxbS8XGYtFhgGzslrzKU';
        let body = baseController.getObjectMapper().mapObject(
{

    "nombre": "Informática",

    "aplicacion": "iris2",

    "usuarios": [

        "JUANDE.MC",

        "SCORDOBA"

    ]

}, 'ModificarUnGrupoPorNombreRequest');
        let contentType = 'application/json';

        controller.updateGroupsApplicationsIris2GroupnameTodosPatch(token, body, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('\n{\n\n    "data": {\n\n        "id": "123456",\n\n        "leido": true,\n\n        "borrado": false,\n\n        "fecha": "2017-10-20T15:59:45.000Z",\n\n        "data": {\n\n            "type": "incidencias_pregunta",\n\n            "referencia": "123456789"\n\n        }\n\n    }\n\n}', context.response.body);
            done();
        });
    });

    /**
     * Devuelve el grupo (123456).
     */
    it("should testLeerUnGrupoPorNombre1 response", function testLeerUnGrupoPorNombre1Test(done) {
        // parameters for the API call
        let token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTU2NzUxNTJ9.94eDQR7Rn8sUblFCaGzoEC1XxbS8XGYtFhgGzslrzKU';

        controller.getGroupsApplicationsIris2GroupnameTodosGet(token, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('\n{\n\n    "data":{\n\n        "id": "123456",\n\n    "leido": false,\n\n    "borrado": false,\n\n    "fecha": "2017-10-20T15:59:45.000Z",\n\n    "data": {\n\n        "type": "incidencias_pregunta",\n\n        "referencia": "123456789"\n\n    }\n\n    }\n\n}', context.response.body);
            done();
        });
    });

    /**
     * Modifica uno o variso de los campos.
     */
    it("should testModificarUnGrupo1 response", function testModificarUnGrupo1Test(done) {
        // parameters for the API call
        let token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTU2NzUxNTJ9.94eDQR7Rn8sUblFCaGzoEC1XxbS8XGYtFhgGzslrzKU';
        let body = baseController.getObjectMapper().mapObject(
{

    "nombre": "Informática",

    "aplicacion": "iris2",

    "usuarios": [

        "JUANDE.MC",

        "SCORDOBA"

    ]

}, 'ModificarUnGrupoRequest');
        let contentType = 'application/json';

        controller.updateGroups5a564715825d4f0e94946c1aPatch(token, body, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('\n{\n\n    "data": {\n\n        "id": "123456",\n\n        "leido": true,\n\n        "borrado": false,\n\n        "fecha": "2017-10-20T15:59:45.000Z",\n\n        "data": {\n\n            "type": "incidencias_pregunta",\n\n            "referencia": "123456789"\n\n        }\n\n    }\n\n}', context.response.body);
            done();
        });
    });

    /**
     * 
Devuelve todos los grupos de la aplicación. Acepta parametros en la url:


skip: se salta ese número de documentos


limit: número documentos máximo que devolverá
     */
    it("should testLeerGruposDeUnaAplicacion1 response", function testLeerGruposDeUnaAplicacion1Test(done) {
        // parameters for the API call
        let borrado = false;
        let fecha = ObjectMapper.parseDateTime('2017-11-15', 'rfc3339');
        let limit = 20;
        let skip = 0;
        let token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTU2NzUxNTJ9.94eDQR7Rn8sUblFCaGzoEC1XxbS8XGYtFhgGzslrzKU';
        let contentType = 'application/json';

        controller.getGroupsApplicationsIris2Get(borrado, fecha, limit, skip, token, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('\n{\n\n    "data": [\n\n        {\n\n            "id": "123456",\n\n            "leido": false,\n\n            "borrado": false,\n\n            "fecha": "2017-10-20T15:59:45.000Z",\n\n            "data": {\n\n                "type": "incidencias_pregunta",\n\n                "referencia": "123456789"\n\n            }\n\n        },\n\n        {\n\n            "id": "123457",\n\n            "leido": false,\n\n            "borrado": false,\n\n            "fecha": "2017-10-20T16:59:45.000Z",\n\n            "data": {\n\n                "type": "incidencias_pregunta",\n\n                "referencia": "123456789"\n\n            }\n\n        }\n\n    ]\n\n}', context.response.body);
            done();
        });
    });

    /**
     * Devuelve el grupo (123456).
     */
    it("should testLeerUnGrupo1 response", function testLeerUnGrupo1Test(done) {
        // parameters for the API call
        let token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTU2NzUxNTJ9.94eDQR7Rn8sUblFCaGzoEC1XxbS8XGYtFhgGzslrzKU';

        controller.getGroups5a564715825d4f0e94946c1aGet(token, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('\n{\n\n    "data":{\n\n        "id": "123456",\n\n    "leido": false,\n\n    "borrado": false,\n\n    "fecha": "2017-10-20T15:59:45.000Z",\n\n    "data": {\n\n        "type": "incidencias_pregunta",\n\n        "referencia": "123456789"\n\n    }\n\n    }\n\n}', context.response.body);
            done();
        });
    });

    /**
     * Crea un nuevo grupo.
     */
    it("should testCrearUnGrupo1 response", function testCrearUnGrupo1Test(done) {
        // parameters for the API call
        let token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTc5Mzk5NDd9.-pLDemUYmYPpjG5CZ7VI7UUBcC8mC_KAbEyNpzHsTMw';
        let body = baseController.getObjectMapper().mapObject(
{

    "nombre": "Informática",

    "aplicacion": "iris2",

    "usuarios": ["JUANDE.MC", "SCORDOBA"]

}, 'CrearUnGrupoRequest');
        let contentType = 'application/json';

        controller.createGroupsPost(token, body, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('\n{\n\n\n"data":\n\n        {\n\n            "id": "123456",\n\n            "leido": false,\n\n            "borrado": false,\n\n            "fecha": "2017-10-20T15:59:45.000Z",\n\n            "data": {\n\n                "type": "incidencias_pregunta",\n\n                "referencia": "123456789"\n\n            }\n\n        }\n\n}\n', context.response.body);
            done();
        });
    });

    /**
     * 
Devuelve todos los grupos. Acepta parametros en la url:


skip: se salta ese número de documentos


limit: número documentos máximo que devolverá
     */
    it("should testLeerGrupos1 response", function testLeerGrupos1Test(done) {
        // parameters for the API call
        let borrado = false;
        let fecha = ObjectMapper.parseDateTime('2017-11-15', 'rfc3339');
        let limit = 20;
        let skip = 0;
        let token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTU2NzUxNTJ9.94eDQR7Rn8sUblFCaGzoEC1XxbS8XGYtFhgGzslrzKU';
        let contentType = 'application/json';

        controller.getGroupsGet(borrado, fecha, limit, skip, token, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('\n{\n\n    "data": [\n\n        {\n\n            "id": "123456",\n\n            "leido": false,\n\n            "borrado": false,\n\n            "fecha": "2017-10-20T15:59:45.000Z",\n\n            "data": {\n\n                "type": "incidencias_pregunta",\n\n                "referencia": "123456789"\n\n            }\n\n        },\n\n        {\n\n            "id": "123457",\n\n            "leido": false,\n\n            "borrado": false,\n\n            "fecha": "2017-10-20T16:59:45.000Z",\n\n            "data": {\n\n                "type": "incidencias_pregunta",\n\n                "referencia": "123456789"\n\n            }\n\n        }\n\n    ]\n\n}', context.response.body);
            done();
        });
    });

});
